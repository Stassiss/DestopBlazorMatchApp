<style>
    .form-control:focus {
        background-color: inherit;
        border-color: inherit;
        box-shadow: none;
    }

    .name-input {
        border: none;
        border-bottom: 2px black solid;
        background-color: antiquewhite;
        padding-bottom: 0;
        height: auto;
        width: 215px;
        transition: width 1s;
        font-size: larger;
        font-weight: bold;
    }

        .name-input:focus {
            width: 100%;
        }

    .input-name-lenght {
        width: 178px;
    }

    .center-items {
        justify-content: center;
        align-content: center;
    }

        .center-items .row {
            margin-right: 0;
        }

    .position-center-left {
        display: flex;
        justify-content: start;
        align-content: center;
    }

    .position-center-right {
        display: flex;
        justify-content: end;
        align-content: center;
    }
</style>
<div class="row ">
    <EditForm Model="Person" OnValidSubmit="(() => OnValidSubmit.InvokeAsync(Person))">
        <DataAnnotationsValidator />
        <div class=" row center-items">
            <div class="row col col-auto">
                <div class="col mb-2 ">
                    <InputText type="text" @bind-Value="@Person.Name" class="form-control name-input input-name-lenght" name="name" placeholder="@htmlPlaceHolderForName" />
                    <ValidationMessage For="@(() => Person.Name)" />
                </div>
                <div class="col mb-2 col-auto">
                    <InputText type="text" @bind-Value="@Person.LastName" class="form-control name-input" name="name" placeholder="@htmlPlaceHolderForLastName" />
                    <ValidationMessage For="@(() => Person.LastName)" />
                </div>
            </div>
            <div class="row col position-center-left">
                <div class="col col-auto mt-2" @onclick="ChangeIsMale">
                    <input type="radio" name="isMale" checked="@isMale" />
                    <label for="isMale">Male</label>
                </div>
                <div class="col col-auto mt-2" @onclick="ChangeIsMale">
                    <input type="radio" name="isMale" checked="@(!isMale)" />
                    <label for="isMale">Female</label>
                </div>
                <div class="col" id="input-buttons">
                    <button type="submit" id="add-person-btn">Add</button>
                    <button type="button" id="clear-lists-btn" @ondblclick="ClearList">ClearLists</button>

                </div>
            </div>

        </div>
    </EditForm>


</div>
@code {

    [Parameter] public EventCallback<Person> OnValidSubmit { get; set; }
    [Parameter] public EventCallback ClearList { get; set; }
    public Person Person = new Person();
    private bool isMale = true;
    private string htmlPlaceHolderForName;
    private string htmlPlaceHolderForLastName;
    // Set radio button to male gender
    protected override void OnInitialized()
    {
        IsMale();
    }


    /// Refresh after submit, from parent component
    public void Refresh()
    {
        Person = new Person();
        Person.IsMale = isMale;
        StateHasChanged();
    }

    // Refresh after radio button is changed
    private void ChangeIsMale()
    {
        isMale = !isMale;
        IsMale();
        Person.IsMale = isMale;
        StateHasChanged();
    }
    private void IsMale()
    {

        if (isMale)
        {
            htmlPlaceHolderForName = "Enter Male Name";
            htmlPlaceHolderForLastName = "Enter Male LastName";
        }
        else
        {
            htmlPlaceHolderForName = "Enter Female Name";
            htmlPlaceHolderForLastName = "Enter Female LastName";

        }
        Person.IsMale = isMale;


    }
}
