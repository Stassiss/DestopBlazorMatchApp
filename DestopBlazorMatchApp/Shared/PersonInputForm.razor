<style>
    .form-control:focus {
        background-color: inherit;
        border-color: inherit;
        box-shadow: none;
    }

    .name-input {
        border: none;
        border-bottom: 2px black solid;
        background-color: antiquewhite;
        padding-bottom: 0;
        height: auto;
        width: 50%;
        transition: width 2s;
        font-size: larger;
        font-weight: bold;
    }

        .name-input:hover {
            width: 100%;
        }
</style>

<EditForm Model="Person" OnValidSubmit="(() => OnValidSubmit.InvokeAsync(Person))">
    <DataAnnotationsValidator />
    <div class=" row justify-content-start align-items-center">
        <div class="col mb-2">
            <InputText type="text" @bind-Value="@Person.Name" class="form-control name-input" name="name" placeholder="@htmlPlaceHolderForName" />
            <ValidationMessage For="@(() => Person.Name)" />
        </div>
        <div class="col mb-2">
            <InputText type="text" @bind-Value="@Person.LastName" class="form-control name-input" name="name" placeholder="@htmlPlaceHolderForLastName" />
            <ValidationMessage For="@(() => Person.LastName)" />
        </div>
        <div class="col col-auto">
            <input type="radio" name="isMale" checked="@isMale" @onchange="ChangeIsMale" />
            <label for="isMale">Male</label>
        </div>
        <div class="col col-auto">
            <input type="radio" name="isMale" checked="@(!isMale)" @onchange="ChangeIsMale" />
            <label for="isMale">Female</label>
        </div>


        <div class="col col-auto">
            <Button ButtonType="create" />
        </div>
    </div>
</EditForm>
@code {

    [Parameter] public EventCallback<Person> OnValidSubmit { get; set; }
    public Person Person = new Person();
    private bool isMale = true;
    private string htmlPlaceHolderForName;
    private string htmlPlaceHolderForLastName;
    // Set radio button to male gender
    protected override void OnInitialized()
    {
        IsMale();
    }


    /// Refresh after submit, from parent component
    public void Refresh()
    {
        Person = new Person();
        Person.IsMale = isMale;
        StateHasChanged();
    }

    // Refresh after radio button is changed
    private void ChangeIsMale()
    {
        isMale = !isMale;
        IsMale();
        Person.IsMale = isMale;
        StateHasChanged();
    }
    private void IsMale()
    {

        if (isMale)
        {
            htmlPlaceHolderForName = "Enter Male Name";
            htmlPlaceHolderForLastName = "Enter Male LastName";
        }
        else
        {
            htmlPlaceHolderForName = "Enter Female Name";
            htmlPlaceHolderForLastName = "Enter Female LastName";

        }
        Person.IsMale = isMale;


    }
}
