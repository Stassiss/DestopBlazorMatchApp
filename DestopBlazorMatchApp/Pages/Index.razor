@page "/"
@inject IPersonRepository personRepository
@inject NavigationManager NavManager

<style>
    .list-row {
        padding-left: 25px;
        padding-right: 25px;
    }
</style>

<div>
    <h1 id="homePage" style="text-align:center; margin-bottom:25px;"> Home page</h1>
    <div id="input-form">
        <PersonInputForm @ref="ChildComponent" OnValidSubmit="AddNewPerson" ClearList="ClearList" />
    </div>
    <div class="row list-row">
        <div class="col-lg-4 col-md-6 pl-0 pr-0">
            <GenericList List="MaleList" ListName="Male">
                <ElementTemplate Context="person">
                    <PersonTemplate ButtonType="delete" Person="person" OnClick="DeletePerson" OnSelect="GetPersonInfo">
                    </PersonTemplate>
                </ElementTemplate>
            </GenericList>
        </div>
        <div class="col-lg-4 col-md-6 pl-0 pr-0">
            <GenericList List="MatchList" ListName="Matches">
                <ElementTemplate Context="Match">
                    <MatchTemplate Match="Match">

                    </MatchTemplate>
                </ElementTemplate>
            </GenericList>
        </div>

        <div class="col-lg-4 col-md-6 pl-0 pr-0">
            <GenericList List="FemaleList" ListName="Female">
                <ElementTemplate Context="person">
                    <PersonTemplate ButtonType="delete" Person="person" OnClick="DeletePerson" OnSelect="GetPersonInfo">
                    </PersonTemplate>
                </ElementTemplate>
            </GenericList>
        </div>
    </div>
</div>

@code {
    private List<Person> MaleList { get; set; }
    private List<Person> FemaleList { get; set; }
    private List<MatchDto> MatchList { get; set; }
    protected PersonInputForm ChildComponent;

    // Get both gender lists on render
    protected override async Task OnInitializedAsync()
    {
        LoadPersonLists();
    }


    private async void AddNewPerson(Person person)
    {
        personRepository.AddPerson(person);
        ChildComponent.Refresh();
        StateHasChanged();
        LoadPersonLists();
    }

    private async void DeletePerson(Person person)
    {
        personRepository.DeletePerson(person);
        LoadPersonLists();
    }
    private void ClearList()
    {
        personRepository.ClearLists();
        LoadPersonLists();
    }
    private void GetPersonInfo(Person person)
    {

        NavManager.NavigateTo($"/details/{person.Id}");
    }

    private void LoadPersonLists()
    {
        // Get  personData from saved file
        MaleList = personRepository.LoadPersonList(true);
        FemaleList = personRepository.LoadPersonList(false);
        MatchList = personRepository.GetMatchDtoListFromMatches();
        StateHasChanged();
    }


}